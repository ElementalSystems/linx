"use strict";


/// lodash titanium shim. If window is undefined set global variable
var global = undefined, isBrowser = false;
try{ isBrowser = (window !== undefined); }catch(e){}
if(!isBrowser){ global = this; global.global = global; }

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Divhide = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var Arr = Divhide.Arr;

var value = Arr.index([1 ,2, 3], 0);
expect(value).toBe(1);

var value = Arr.index([1 ,2, 3], 10);
expect(value).toBeNull();

var first = Arr.first([1 ,2, 3]);
expect(first).toBe(first);

var last = Arr.last([1 ,2, 3]);
expect(last).toBe(3);

var length = Arr.length([1 ,2, 3]);
expect(last).toBe(3);

var array = [1, 2, 3];
Arr.insert(array, 4);
expect(array).toEqual([1, 2, 3, 4]);

var array = Arr.insert([1 ,2, 3], [4, 5]);
expect(array).toEqual([1, 2, 3, 4, 5]);

var array = Arr.insert([1 ,2, 3], -1, 0);
expect(array).toEqual([-1, 1, 2, 3]);

var array = [1, 2, 3];
Arr.remove(array, 0);
expect(array).toEqual([2, 3]);

var array = [1, 2, 3];
Arr.remove(array, 0, 2);
expect(array).toEqual([3]);

},{}],2:[function(require,module,exports){

var Assert = Divhide.Assert;

/// Test if the value is valid
var isValid = Assert.required()
    .string()
    .regex("^M")
    .max(10)
    .min(5)
    .isValid("Mary");

expect(isValid)
    .toBe(false);


/// Valid assertion:
var obj = Assert.required()
    .array()
    .max(5)
    .assert([1, 2, 4, 5]);

expect(obj)
    .equals([1, 2, 4, 5]);


/// Invalid assertion:
var fn = function(){

    Assert.required()
        .array()
        .max(1) /// will be on array context
        .assert(["first", "second"]);

};

expect(fn)
    .toThrow();


},{}],3:[function(require,module,exports){

/// Assertion builder
var Assertion = Divhide.Assertion;

/// Create the custom Assert facility
var Assert = new Assertion({

    /**
     *
     * Tests if the string starts with the given value
     *
     * @param  {String} val
     * @param  {String} str
     * @return {String}
     */
    startsWith: function(val, str){

        if(val.indexOf(str) !== 0){
            throw new Error("Does not starts with " + str);
        }

    }

});

/// Test if the value is valid
var isValid = Assert
                .required()
                .string()
                .startsWith("Mary")
                .isValid("Mary and Peter");

expect(isValid)
    .toBe(true)


/// Assert value
var value = Assert
            .required()
            .string()
            .startsWith("Mary")
            .assert("Mary and Peter");

expect(value)
    .equals("Mary and Peter");


},{}],4:[function(require,module,exports){

var Chain = Divhide.Chain;


var Maths = new Chain(

    /// the chaining fns
    {
        sum: function(i,j){
            return i + j;
        },

        sub: function(i, j){
            return i - j;
        }
    },

    /// the evaluation fns
    {
        calculate: function(result, err){
            return result;
        }
    },

    /// the options
    {

        /// if true the return of a function is passed as an argument to the next one
        /// if false, the evaluation arguments are passed to every chain function (default)
        pipe: true

    });


var value = Maths.sum(5)
    .sub(3)
    .sum(10)
    .calculate(0);

expect(value)
    .toBe(12);

},{}],5:[function(require,module,exports){

var Exception = Divhide.Exception.Exception;

/// the external translation data
var Portuguese = {
    "The maximum value allowed is <%= value %>.": "Valor máximo é <%= value %>."
};

var error = new Exception(
    "The maximum value allowed is <%= value %>.",
    { value: 10 });

/// Exception instance is an error!
expect(error instanceof Error)
    .equals(true);

/// Exception message
expect(error.toString())
    .equals("The maximum value allowed is 10.");

/// I18N Exception message
expect(error.toString(Portuguese))
    .equals("Valor máximo é 10.");

},{}],6:[function(require,module,exports){

var Exception       = Divhide.Exception.Exception,
    ExceptionList   = Divhide.Exception.ExceptionList;


var errors = new ExceptionList();

/// is an instance of Error
expect(errors instanceof Error)
    .toEqual(true);

/// adding errors to ExceptionList ( you can also merge other ExceptionList! )
errors.push( new Exception("Error1") );
errors.push( new Exception("Error2") );
errors.push( new Exception("Error3") );

/// get length of the list
expect(errors.length)
    .toEqual(3);

/// get an error from the list
expect(errors.items[0].toString())
    .toEqual("Error1");

/// get the translated error
expect(errors.toString({ "Error1": "Error 1", "Error2": "Error 2", "Error3": "Error 3" }))
    .toEqual("Error 1, Error 2, Error 3");


},{}],7:[function(require,module,exports){

var I18NString = Divhide.I18N.String;

/// the external translation data
var Portuguese = {
    "hello <%= username %>": "olá <%= username %>"
};

/// create a I18NString (message + data)
var message = new I18NString("hello <%= username %>", { username: "oscar" });

/// Gets the English message
var en = message.toString();
expect(en)
    .toBe("hello oscar");

/// Gets the Portuguese message
var en = message.toString(Portuguese);
expect(en)
    .toBe("olá oscar");
},{}],8:[function(require,module,exports){

var Obj = Divhide.Obj;

var results = Obj.filter({ "one": 1, "two": 2 });
expect(results)
    .toEqual(["one", "two"]);

var results = Obj.filter({ "one": 1, "two": 2 }, "one");
expect(results)
    .toEqual(["one"]);


var results = Obj.filter({ "one": 1, "two": 2 }, "three");
expect(results)
    .toEqual([]);
},{}],9:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.array(1);
expect(value)
    .equals([1]);

var value = Safe.array(1);
expect(value)
    .equals([1]);

var value = Safe.array([1, 2]);
expect(value)
    .equals([1, 2]);

var value = Safe.array(null, [ 1, 2 ]);
expect(value)
    .equals([1, 2]);

var value = Safe.array("1", [1, 2]);
expect(value)
    .equals(["1"]);

},{}],10:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.boolean(true);
expect(value).toBe(true);

var value = Safe.boolean(false);
expect(value).toBe(false);

var value = Safe.boolean(1);
expect(value).toBe(true);

var value = Safe.boolean("1");
expect(value).toBe(true);

var value = Safe.boolean("0");
expect(value).toBe(false);

var value = Safe.boolean({});
expect(value).toBe(false);

var value = Safe.boolean({}, true);
expect(value).toBe(true);

var value = Safe.boolean([]);
expect(value).toBe(false);

var value = Safe.boolean(null);
expect(value).toBe(false);

},{}],11:[function(require,module,exports){

var Safe = Divhide.Safe;

var fn = Safe.function(function(){});
expect(fn())
    .toBe(undefined);

var fn = Safe.function("");
expect(fn())
    .toBe(undefined);

var fn = Safe.function("", function(){ return 1; });
expect(fn())
    .toBe(1);

},{}],12:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.length([1, 2]);
expect(value).toBe(2);

var value = Safe.length({ one: 1, two: 2});
expect(value).toBe(2);

var value = Safe.length(2);
expect(value).toBe(2);

var value = Safe.length("hello");
expect(value).toBe(5);

},{}],13:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.number(1);
expect(value).equals(1);

var value = Safe.number("");
expect(value).equals(0);

var value = Safe.number("1");
expect(value).equals(1);

var value = Safe.number({});
expect(value).equals(0);

var value = Safe.number("", 1);
expect(value).equals(1);

},{}],14:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.object({ one: 1 });
expect(value).equals({ one: 1 });

var value = Safe.object([]);
expect(value).equals({});

var value = Safe.object([], { one: 1 });
expect(value).equals({ one: 1 });


},{}],15:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.regexp(/regexp/);
expect(value)
    .toEqual(/regexp/);

var value = Safe.regexp("/regexp/");
expect(value)
    .toEqual(/regexp/);

var value = Safe.regexp("");
expect(value)
    .toEqual(/^$/);

var value = Safe.regexp("name");
expect(value)
    .toEqual(/^name$/);

var value = Safe.regexp({}, /regexp/);
expect(value)
    .toEqual(/regexp/);

},{}],16:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.string("");
expect(value).toBe("");

var value = Safe.string({});
expect(value).toBe("");

var value = Safe.string({}, "default");
expect(value).toBe("default");


},{}],17:[function(require,module,exports){

var Safe = Divhide.Safe;

var value = Safe.value(1);
expect(value).toBe(1);

var value = Safe.value("1");
expect(value).toBe("1");

var value = Safe.value(null);
expect(value).toBe(null);

var value = Safe.value(undefined);
expect(value).toBe(null);

var value = Safe.value(null, 1);
expect(value).toBe(1);


},{}],18:[function(require,module,exports){

var Schema = Divhide.Schema;

var schema = Schema
            .any()
            .required()
            .compile();


/// valid string value!
var value = schema.value("str");
expect(value).equals(value);


/// valid array value!
value = schema.value([1,2]);
expect(value).equals([1,2]);


/// because its required it fails
expect(
    function(){
        schema.value(null);
    })
    .toThrow(
        new Error("Value is required.")
    );
},{}],19:[function(require,module,exports){

var Schema = Divhide.Schema;


/// Array schema ( no repeatable)
var schema = Schema
    .array([ Schema.string().default("value"), Schema.number(), Schema.string() ])
    .optional()
    .compile();


/// because its optional it returns null
var value = schema.value();
expect(value).toBe(null);


/// The value is right!
value = schema.value([ '1', 2, '3' ]);
expect(value).equals([ '1', 2, '3']);


/// array have more items than it should
expect(
    function(){
        schema.value([ '1', 2, '3', 4, 5, 6 ])
    })
    .toThrow(
        new Error("Expected list with 3 items but found 6.")
    );


/// Wrong type!
expect(
    function(){
        schema.value(10);
    })
    .toThrow(
        new Error("'array' was expected but found 'number' instead.")
    );


///
/// Just another way to write the rule!
///


var schema = Schema
    .array([ Schema.string(), Schema.number() ])
    .repeatable()
    .optional()
    .compile();


// Get the value
var value = schema.value(["1", 2, "3", 4]);
expect(value).equals(["1", 2, "3", 4]);


// because the number of item on the array must be multiple of 2
// an error is thrown
expect(
    function(){
        schema.value(["1", 2, "3"])
    })
    .toThrow(
        new Error("Expected list length to be multiple of 2 but found length of 3.")
    );


},{}],20:[function(require,module,exports){

var Schema = Divhide.Schema;

var schema = Schema.number()
                .optional()
                .min(3)
                .max(5)
                .compile();


/// value is correct
var value = schema.value(3);
expect(value).toBe(3);


/// optional value
var value = schema.value();
expect(value).equals(null);


/// value is undefined
expect(
    function(){
        schema.value(0);
    })
    .toThrow(
        new Error("The minimum value allowed is 3.")
    );


/// values exceed the max
expect(
    function(){
        schema.value(10);
    })
    .toThrow(
        new Error("The maximum value allowed is 5.")
    );


/// because is optional, is valid!
var isValid = schema.isValid();
expect(isValid).toBe(true);


isValid = schema.isValid(3);
expect(isValid).toBe(true);


isValid = schema.isValid(10);
expect(isValid).toBe(false);


},{}],21:[function(require,module,exports){

var Schema = Divhide.Schema;

var schema =
        Schema.object({
            "/^optional/"   : Schema.string().optional(),
            "number"        : 0,
            "string"        : "",
        })
        .required()
        /// TIP: When compiled the schema is faster
        .compile();


/// let's get the object
var value = schema.value({
    string      : "awesome!",
    number      : "0",
    optional1   : "1",
    optional2   : "2",
    other       : 1
});


/// Please notice that some of the object properties were
/// not included!
expect(value).equals({
    "number": 0,
    "string": "awesome!",
    "optional1": "1",
    "optional2": "2"
});


},{}],22:[function(require,module,exports){

var Schema = Divhide.Schema;


/// get the schema
var schema = Schema.object({

        /// array with multiple strings
        data: Schema.array([ "" ]).repeatable().max(10),

        /// every other object key is optional
        "/.*/": Schema.number().optional()

    }).required();


/// apply the schema to the value
var value = schema.value({
    data: [ 1, 2, 3, 4, 5, 6],
    timestamp: "1404373579473"
});


/// test the value
expect(value).equals({
    data: [ '1', '2', '3', '4', '5' , '6'],
    timestamp: 1404373579473
});
},{}],23:[function(require,module,exports){

var Schema = Divhide.Schema;


/// String schema
var schema = Schema.string()
                .required()
                .min(3)
                .max(5);


/// returns the value
var value = schema.value("hello");
expect(value).toBe("hello");


/// value is required!
expect(
    function(){
        schema.value();
    })
    .toThrowError("Value is required., The minimum value allowed is 3.");


/// value is required!
expect(
    function(){
        schema.value("hello world");
    })
    .toThrow(new Error("The maximum value allowed is 5."));


/// Check if is valid
var isValid = schema.isValid("");
expect(isValid).toBe(false);


var isValid = schema.isValid("hello");
expect(isValid).toBe(true);


var isValid = schema.isValid("hello world");
expect(isValid).toBe(false);


},{}],24:[function(require,module,exports){

var Schema = Divhide.Schema;

var serialized =
        Schema.object({
            "name"      : "",
            "friends"   : Schema.array([
                {
                    name: ""
                }
            ]).optional(),
        })
        .required()
        .serialize();

/// deserialize the object
var schema = Schema.deserialize(serialized);

/// let's get the object
var value = schema.value({
    id: 1,
    name: "Oscar",
    friends: [{ name: "Solange" }]
});

expect(value).equals({
    name: "Oscar",
    friends: [{ name: "Solange" }]
});


},{}],25:[function(require,module,exports){

var Type = Divhide.Type;

var type = Type.of({});
expect(type).toBe("object");

var type = Type.of([]);
expect(type).toBe("array");

var type = Type.of(1);
expect(type).toBe("number");

var type = Type.of("name");
expect(type).toBe("string");

var type = Type.of(true);
expect(type).toBe("boolean");

var isArray = Type.isArray([]);
expect(isArray).toBe(true);

var isBoolean = Type.isBoolean(true);
expect(isBoolean).toBe(true);

var isFunction = Type.isFunction(function(){});
expect(isFunction).toBe(true);

var isString = Type.isString("");
expect(isString).toBe(true);

var isObject = Type.isObject({});
expect(isObject).toBe(true);

var isObject = Type.isObject(null);
expect(isObject).toBe(false);

var isRegExp = Type.isRegExp(/reg/);
expect(isRegExp).toBe(true);

var isNumber = Type.isNumber(1);
expect(isNumber).toBe(true);

var isNumber = Type.isNumber("1.1");
expect(isNumber).toBe(true);

var isDefined = Type.isDefined(null);
expect(isDefined).toBe(false);

var isDefined = Type.isDefined(undefined);
expect(isDefined).toBe(false);

var isEmpty = Type.isEmpty("");
expect(isEmpty).toBe(true);

var isEmpty = Type.isEmpty([]);
expect(isEmpty).toBe(true);

var isEmpty =  Type.isEmpty({});
expect(isEmpty).toBe(true);

var isEmpty =  Type.isEmpty(null);
expect(isEmpty).toBe(true);

var isString = Type.instanceOf("string", String);
expect(isString).toBe(true);

},{}],26:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    Type        = require("./Type"),
    Safe        = require("./Safe");



var Arr = {

    /**
     * Get index value
     *
     * @param {Array}   array
     * @param {Number}  index
     *
     * @return {*}
     *
     */
    index: function(array, index){

        array = Safe.array(array);
        index = Safe.number(index);

        if(index < 0 || index > array.length - 1)
            return null;

        return array[index];

    },

    /**
     *
     * Get last value of the array
     *
     * @param {Array}   array
     *
     * @return {Object}
     *
     */
    last: function(array){

        array = Safe.array(array);

        return Arr.index(array, array.length - 1);

    },

    /*
     * Get first value of the array
     *
     * @param {Array}   array
     *
     * @return {Object}
     *
     */
    first: function(array){

        return Arr.index(array);

    },

    /**
     *
     * Returns the length of the array
     *
     * @param {Array}   array
     *
     * @return {Number}
     *
     */
    length: function(array){

        array = Safe.array(array);

        return array.length;

    },

    /**
     *
     * Inserts the value in the specified index of the array
     *
     * @param {Array}   array
     * @param {*}       value
     * @param {Number}  index
     *
     * @return {Array}
     *
     */
    insert: function(array, value, index){

        array = Safe.array(array);
        value = Safe.array(value);

        /* jshint -W041 */
        if(index == null){
            index = Arr.length(array);
        } else {
            index = Safe.number(index);
        }

        // merge the structures
        _.each(
            value.reverse(),
            function(item){
                array.splice(index, 0, item);
            }
        );

        return array;

    },

    /*
     * Remove index of the array. If no index is specified the first
     * element is removed.
     *
     * Returns the removed elements.
     *
     * @param {Array}   index
     * @param {Number}  index
     * @param {Number}  n
     *
     * @return {Array}
     *
     */
    remove: function(array, index, n){

        array   = Safe.array(array);
        index   = Safe.number(index, 0);
        n       = Safe.number(n, 1);

        return array.splice(index, n);

    }

};


module.exports = Arr;


},{"./Safe":47,"./Type":58,"lodash":"lodash"}],27:[function(require,module,exports){
'use strict';

var Assertion = require("./Assertion");

module.exports = new Assertion();

},{"./Assertion":37}],28:[function(require,module,exports){
'use strict';

var Type        = require("../Type"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Test if value is an array
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {Array}
 *
 */
var Arr = function(val){

    var v = Type.isArray(val);

    if(!v){
        throw new Exception("VALIDATION_TYPE", { value: Type.of(val), expected: Type.of([]) });
    }

    return val;

};

module.exports = Arr;

},{"../Exception/Exception":42,"../Type":58}],29:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    Type        = require("../Type"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Get function name
 * 
 * @param  {Function} fn
 * @return {String}
 * 
 */
var getFnName = function(fun) {

	var ret = fun.toString();
	ret = ret.substr('function '.length);
	ret = ret.substr(0, ret.indexOf('('));
	return ret;

};


/**
 *
 * InstanceOf assertion. 
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @param {*} value
 * 
 * @return {*}
 *
 */
var InstanceOf = function(val, value){

	/// test with instanceof
	if(!Type.instanceOf(val, value)){
		throw new Exception("VALIDATION_INSTANCEOF", { value: getFnName(value) });
	}

    return val;

};

module.exports = InstanceOf;

},{"../Exception/Exception":42,"../Type":58,"lodash":"lodash"}],30:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    Type        = require("../Type"),
    Safe        = require("../Safe"),
    Exception   = require("../Exception/Exception");



/**
 *
 * Test the max length of any kind of object
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {*}
 *
 */
var Max = function(val, max){

    max = Safe.number(max);
    var length = Safe.length(val);

    if(length > max){
        throw new Exception("VALIDATION_MAX", { value: max });
    }

    return val;

};

module.exports = Max;

},{"../Exception/Exception":42,"../Safe":47,"../Type":58,"lodash":"lodash"}],31:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    Type        = require("../Type"),
    Safe        = require("../Safe"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Test the min length of any kind of object
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {*}
 *
 */
var Min = function(val, min){

    min = Safe.number(min);
    var length = Safe.length(val);

    if(length < min){
        throw new Exception("VALIDATION_MIN", { value: min });
    }

    return val;

};

module.exports = Min;

},{"../Exception/Exception":42,"../Safe":47,"../Type":58,"lodash":"lodash"}],32:[function(require,module,exports){
'use strict';

var Type        = require("../Type"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Test if value is a number
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {Number}
 *
 */
var Numb = function(val){

    var v = Type.isNumber(val);

    if(!v){
        throw new Exception("VALIDATION_TYPE", { value: Type.of(val), expected: Type.of(0) });
    }

    return val;

};

module.exports = Numb;

},{"../Exception/Exception":42,"../Type":58}],33:[function(require,module,exports){
'use strict';

var Type        = require("../Type"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Test if value is an object
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {Object}
 *
 */
var Obj = function(val){

    var v = Type.isObject(val);

    if(!v){
        throw new Exception("VALIDATION_TYPE", { value: Type.of(val), expected: Type.of({}) });
    }

    return val;

};

module.exports = Obj;

},{"../Exception/Exception":42,"../Type":58}],34:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    Type        = require("../Type"),
    Safe        = require("../Safe"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Test the regex
 *
 * @throws {Exception}
 *
 * @param {*}               val
 * @param {String|Regex}    regex
 * @return {*}
 *
 */
var Regex = function(val, regex){

    regex = Safe.regexp(regex);

    var isValid = !!regex.exec(val);

    if(!isValid){
        throw new Exception("REGEXP", { value: val });
    }

    return val;

};

module.exports = Regex;
},{"../Exception/Exception":42,"../Safe":47,"../Type":58,"lodash":"lodash"}],35:[function(require,module,exports){
'use strict';

var Type        = require("../Type"),
    Exception   = require("../Exception/Exception");

/**
 *
 * IsRequired
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {*}
 *
 */
var Required = function(val){

    var v = Type.isDefined(val);

    if(!v) {
        throw new Exception("VALIDATION_REQUIRED");
    }

    return val;

};

module.exports = Required;

},{"../Exception/Exception":42,"../Type":58}],36:[function(require,module,exports){
'use strict';

var Type        = require("../Type"),
    Exception   = require("../Exception/Exception");

/**
 *
 * Test if value is a string
 *
 * @throws {Exception}
 *
 * @param {*} val
 * @return {String}
 *
 */
var Str = function(val){

    var v = Type.isString(val);

    if(!v){
        throw new Exception("VALIDATION_TYPE", { value: Type.of(val), expected: Type.of("") });
    }

    return val;

};

module.exports = Str;

},{"../Exception/Exception":42,"../Type":58}],37:[function(require,module,exports){
'use strict';

var _               = require("lodash"),
    Safe            = require("./Safe"),
    Chain           = require("./Chain"),
    ChainContext    = require("./Chain/ChainContext");


/**
 *
 * The Chainable functions
 *
 * @type {Object}
 *
 */
var ChainableFns = {};

ChainableFns.required   = require("./Assert/Required");
ChainableFns.string     = require("./Assert/String");
ChainableFns.object     = require("./Assert/Object");
ChainableFns.array      = require("./Assert/Array");
ChainableFns.number     = require("./Assert/Number");
ChainableFns.max        = require("./Assert/Max");
ChainableFns.min        = require("./Assert/Min");
ChainableFns.regex      = require("./Assert/Regex");
ChainableFns.instanceOf = require("./Assert/InstanceOf");

/**
 *
 * The Assertion functions
 *
 * @type {Object}
 *
 */
var AssertionFns = {};

/**
 *
 * Tests if the combination of rules are valid
 *
 * @param  {*}          result
 * @param  {Error}      err
 * @return {Boolean}
 */
AssertionFns.isValid = function(result, err){
    return !err;
};

/**
 *
 * Assert
 *
 * @param  {*}      result
 * @param  {Error}  err
 * @return {}
 *
 */
AssertionFns.assert = function(result, err){

    if(err){
        throw err;
    }

    return result;

};

/**
 *
 * Construct a new Assertion provider. This can have some custom actions.
 * @class
 *
 * @param {Object} fns
 *
 * @return {Object}
 *
 * @example
 *
 * Assertion({})
 *     .required()
 *     .string()
 *     .max(10)
 *     .min(5)
 *     [ .isValid("aaaa") | .assert("aaaa") ]
 *
 */
var Assertion = function(fns){

    fns = Safe.object(fns);
    fns = _.assign({}, fns, ChainableFns);

    /// Get the current ChainContext of the assertion, in order
    /// to keep the assertion state.
    var context = null;
    _.each(arguments, function(arg){

        if(arg instanceof ChainContext){
            context = arg;
            return false;
        }

    });

    /// Apply Cahin to the same context
    /// this is important because we can invoke "instaceof Assertion"
    Chain.apply(this, [fns, AssertionFns, { pipe: false, type: Assertion }, context]);

};

module.exports = Assertion;


},{"./Assert/Array":28,"./Assert/InstanceOf":29,"./Assert/Max":30,"./Assert/Min":31,"./Assert/Number":32,"./Assert/Object":33,"./Assert/Regex":34,"./Assert/Required":35,"./Assert/String":36,"./Chain":38,"./Chain/ChainContext":39,"./Safe":47,"lodash":"lodash"}],38:[function(require,module,exports){
'use strict';

var _    = require("lodash"),
    Type = require("./Type"),
    Safe = require("./Safe"),
    ChainContext    = require("./Chain/ChainContext");



/**
 *
 * Module internal code
 *
 * @type {Object}
 *
 */
var Internal = {};

/**
 *
 * Gets the argument list
 *
 * @param  {Object} argsObj
 * @return {Array}
 *
 */
Internal.getArgumentList = function(argsObj){

    var args = [];

    _.each(argsObj, function(obj, index){
        args.push(obj);
    });

    return args;

};

/**
 *
 * Wraps the chainable function
 *
 * @param {Internal.ChainContext} context
 * @param {Function}    fn
 * @param {Object}      chainableFns
 * @param {Object}      evaluationFns
 * @param {Object}      options
 *
 * @return {Function}
 *
 */
Internal.wrapChainableFunction = function(context, fn, chainableFns, evaluationFns, options){

    options = Safe.object(options);

    return function() {

        var curContext  = context,
            args        = Internal.getArgumentList(arguments);

        /// initialize context if needed
        if(!curContext){
            curContext = new ChainContext(options);
        }

        /// add the function to the curContext
        curContext.add(fn, args);

        /// this is usefull to create "typed" instances of the Chain
        var ChainClass = Safe.function(options.type, Chain);

        return new ChainClass(chainableFns, evaluationFns, options, curContext);

    };

};

/**
 *
 * Wraps a returnable function. The last argument of the function is always the error, or null
 * if doesn't exists.
 *
 * @param {Internal.ChainContext} context
 * @param {Function}    fn
 * @param {Object}      chainableFns
 * @param {Object}      evaluationFns
 * @param {Object}      options
 *
 * @return {Function}
 *
 */
Internal.wrapReturnableFunction = function(context, fn, chainableFns, evaluationFns, options){

    options = Safe.object(options);

    return function() {

        var curContext  = context,
            args        = Internal.getArgumentList(arguments);

        /// initialize context if needed
        if(!curContext){
            curContext = new ChainContext(options);
        }

        var result  = null,
            err     = null;

        /// wrap the arguments to .apply call. The last argument should be the one defined
        /// on the options.
        var _args = [ args.shift() ];

        /// sets the scope of the context
        var scope = curContext.setScope(options.scope);

        try {
            /// execute all the chained functions
            result = curContext.exec(_args, options.argument);
        }
        catch(e){
            err = e;
        }

        /// if its on pipe mode, wrap the result so it can be correctly .apply()
        if(options.pipe){
            result = [ result ];
        }

        /// create the evaluation function arguments
        var fnArgs = Safe.array(result, [ null ])
            /// concat the arguments if they are not undefined
            .concat(Safe.array(args))
            /// concat the argument if is not undefined
            .concat(Safe.array(options.argument))
            /// concat the err as last argument
            .concat([err]);

        return fn.apply(scope, fnArgs);

    };

};

/**
 *
 * Get chain functions
 *
 * @param  {Internal.CurrentAssertionContext} assertionContext
 * @param  {Object} chainableFns
 * @param  {Object} evaluationFns
 * @param  {Object} options
 *
 * @return {Object}
 *
 */
Internal.getChainFunctions = function(context, chainableFns, evaluationFns, options){

    /// merge the default fns and the custom functions
    var fns = _.assign({}, chainableFns);

    /// wrap the chainable functions
    _.each(
        fns,
        function(fn, name){

            if(Type.isFunction(fn)){
                fns[name] = Internal.wrapChainableFunction(context, fn, chainableFns, evaluationFns, options);
            }

        });

    /// wrap the returning functions
    _.each(
        evaluationFns,
        function(fn, name){

            if(Type.isFunction(fn)){
                fns[name] = Internal.wrapReturnableFunction(context, fn, chainableFns, evaluationFns, options);
            }

        });

    return fns;

};

/**
 *
 * Chain constructor
 * @class
 *
 * @param {Object}          chainableFns
 * @param {Object}          evaluationFns
 * @param {Object}          options
 * @param {ChainContext}    context
 *
 * @return {Object}
 *
 *
 * @example
 *
 * new Chain(
 *
 *     /// chainable fns
 *     {
 *         "fn": function(){}
 *     },
 *
 *     /// evaluation fns
 *     {},
 *
 *     /// options fns
 *     {
 *         type         : {},
 *         pipe         : [true|false],
 *         scope        : Function,
 *         argument     : undefined
 *     },
 *
 *     /// context
 *     {}
 *
 * );
 *
 *
 */
var Chain = function(chainableFns, evaluationFns, options, context){

    var scope   = this;

    /// chain the functions
    var fns = Internal.getChainFunctions(context, chainableFns, evaluationFns, options);

    /// initialize this context
    _.each(fns, function(val, key){
        scope[key] = val;
    });

};

Chain.prototype = {};


module.exports = Chain;


},{"./Chain/ChainContext":39,"./Safe":47,"./Type":58,"lodash":"lodash"}],39:[function(require,module,exports){
'use strict';

var _    = require("lodash"),
    Safe = require("../Safe"),
    Type = require("../Type"),

    ChainFunction   = require("./ChainFunction");


/**
 *
 * A chain context keeps track of the current chainable state
 * @class
 *
 * @param {Object} options
 *
 * @example
 *
 * new ChainContext({
 *
 *     pipe:
 * })
 */
var ChainContext = function(options){

    options = Safe.object(options);

    /**
     * The context registered functions
     *
     * @type { [Internal.AssertionFunction] }
     *
     */
    this.fns = [];

    /**
     *
     * The shared fn context
     *
     * @type {Object}
     *
     */
    this.scope = this.setScope(options.scope);

    /**
     *
     * Pipe mode context
     *
     * @type {Boolean}
     *
     */
    this.pipe = Safe.boolean(options.pipe);

};

/**
 *
 * Sets the scope of this context.
 *
 * @param  {Object|Function} scope
 * @return {Object}
 */
ChainContext.prototype.setScope = function(scope){

    if(Type.isDefined(scope)){
        scope = Type.isFunction(scope) ? scope() : scope;
    }

    /// Maintain the current context if not defined
    scope = scope || this.scope;

    /// set the context
    this.scope = Safe.object(scope, {});

    return this.scope;

};

/**
 *
 * Chain the given function
 *
 * @param  {Function|Object}   fn
 * @param  {Array}  args
 *
 * @return {Internal.Chain}
 *
 */
ChainContext.prototype.add = function(fn, args){

    if(Type.isFunction(fn)) {

        fn = new ChainFunction({ fn: fn, args: args });

        this.fns.push( fn );

    }

};

/**
 *
 * Execute the context using the given argument as parameter
 *
 * @param  {*}          args
 * @param  {Array}      extraArgs
 * @param  {Funcion}    errCallback
 *
 * @return {*}
 **
 */
ChainContext.prototype.exec = function(args, extraArgs, errCallback){

    extraArgs   = Safe.value(extraArgs);
    errCallback = Safe.function(errCallback, function(err){ throw err; });

    var self    = this,
        result  = args,
        error   = null;

    /// execute the functions
    _.each(
        this.fns,
        function(fn, index){

            try {

                /// really execute the function
                var value = fn.apply(self.scope, result, extraArgs);

                /// if chain return values between the functions
                if(self.pipe) {
                    result = value;
                }

            } catch(e){
                error = e;
            }

            /// stop iterating
            if(error !== null){
                return false;
            }

        });

    /// if an error exists
    if(error){
        errCallback(error);
        return null;
    }

    /// returns
    return result;

};

module.exports = ChainContext;

},{"../Safe":47,"../Type":58,"./ChainFunction":40,"lodash":"lodash"}],40:[function(require,module,exports){
'use strict';

var _    = require("lodash"),
    Type = require("../Type"),
    Safe = require("../Safe");

/**
 * @class
 * The ChainFunction wraps the functionality of a function executed
 * on a chain context.
 *
 * @param {Object} options
 *
 * @example
 * new ChainFunction({
 *     fn   : function(){},
 *     args : []
 * });
 *
 */
var ChainFunction = function(options){

    options = Safe.object(options);

    this.name   = Safe.string(options.name, "?");
    this.fn     = Safe.function(options.fn, function(){});
    this.args   = Safe.array(options.args);

};

/**
 *
 * Execute the function within the context of the given scope and args.
 *
 * The arguments of the function will be the concatenation of the given
 * args and the instance arguments.
 *
 * @param  {*} scope
 * @param  {*} args
 * @param  {*} extraArgs
 *
 * @return {*}
 *
 */
ChainFunction.prototype.apply = function(scope, args, extraArgs) {

    scope       = Safe.object(scope);
    args        = Safe.array(args);
    extraArgs   = Safe.array(extraArgs);

    /// the given args should always exist
    if(args.length === 0) args = [ null ];

    /// concatenate the given arguments with the instance
    args = args.concat(this.args).concat(extraArgs);

    /// execute function with obj scope and the given arguments
    return this.fn.apply(scope, args);

};


module.exports = ChainFunction;

},{"../Safe":47,"../Type":58,"lodash":"lodash"}],41:[function(require,module,exports){
'use strict';

var _                        = require("lodash"),
    Type                     = require("./Type"),
    Safe                     = require("./Safe"),
    Chain                    = require("./Chain"),
    ChainContext             = require("./Chain/ChainContext"),
    Types                    = require("./Schema/Types"),
    SchemaDefinition         = require("./Schema/SchemaDefinition"),
    SchemaEvaluator          = require("./Schema/SchemaEvaluator");

/**
 *
 * Internal methods wrapper
 *
 * @type {Object}
 *
 */
var Internal = {};

/**
 *
 * Wraps the validation functions in order to change the SchemaDefinition context
 * when applied.
 *
 * @param  {String} name
 *
 * @return {ValidationFunction}
 *
 */
Internal.wrapValidationFunction = function(name){

    /// arguments normalization
    name = Safe.string(name);

    /// return the wrapped function
    return function(){

        /// get the actual arguments
        var args = _.toArray(arguments);

        /// first argument is the eval object, so discard it.
        args.shift();
        
        /// last argument is the chain argument option, so discard it
        args.pop();

        /// add the value definition to the SchemaDefinition list
        this.validations.push({
            name: name,
            args: args
        });

    };

};

/**
 *
 * SchemaDefinition compile options.
 *
 * @type {Object}
 * 
 */
Internal.compileOptions = {

    /**
     *
     * Prepare the given value for the SchemaDefinition 
     * conversion. If the value is instance of Schema get 
     * its SchemaDefinition value for the conversions
     *
     * @param  {*} val
     * 
     * @return {*}
     * 
     */
    prepare: function(val){

        if(Type.instanceOf(val, Types.Schema)){
            var schemaData = val.serialize();
            val = new SchemaDefinition(schemaData, { 
                prepare: function(val){
                    return new SchemaDefinition(val, { compile: false });
                }
            });
        }

        return val;

    }

};

/**
 *
 * The Schema Chainable functions
 *
 * @type {Object}
 *
 */
var SchemaChainableFns = {

    any: function(){
        this.any = true;
        this.schema = null;
    },

    strict: function(){
        this.strict = true;
    },

    string : function(val, obj){
        this.schema = "";
        this.required = true;
        this.any = false;
    },

    object : function(val, obj){
        obj = Safe.object(obj, {});
        this.schema = obj;
        this.required = true;
        this.any = false;
    },

    array : function(val, obj){
        obj = Safe.array(obj, []);
        this.schema = obj;
        this.required = true;
        this.any = false;
    },

    function : function(){
        this.schema = function(){};
        this.required = true;
        this.any = false;
    },

    number : function(){
        this.schema = 0;
        this.required = true;
        this.any = false;
    },

    boolean : function(){
        this.schema = Boolean(true);
        this.required = true;
        this.any = false;
    },

    default : function(val, defaultValue){
        this.default = defaultValue;
    },

    required : function(){
        this.required = true;
    },

    optional : function(){
        this.required = false;
    },

    repeatable: function(){
        this.repeatable = true;
    }

};

/**
 *
 * The default Custom Chainable Functions
 *
 * @type {Object}
 *
 */
var CustomChainableFns = {
    "min": require("./Assert/Min"),
    "max": require("./Assert/Max"),
    "regex": require("./Assert/Regex"),
};

/**
 *
 * The evaluation functions
 *
 * @type {Object}
 *
 */
var EvaluationFns = {

    /**
     *
     * Compile the rule and return the facade
     *
     * @return {SchemaEvaluator}
     *
     */
    compile: function(result, argument, err){

        /// throw error if there was some in the chain
        if(err){
            throw err;
        }

        return new SchemaEvaluator(this, argument, Internal.compileOptions);

    },

    /**
     *
     * Apply the schema rules and return the value.
     *
     * @throws {Error} If the value is invalid
     *
     * @param  {*}      result
     * @param  {Object} argument
     * @return {*}
     *
     */
    value: function(result, argument, err){

        /// throw error if there was some in the chain
        if(err){
            throw err;
        }

        var r = new SchemaEvaluator(this, argument, Internal.compileOptions);
        return r.value(result);

    },

    /**
     *
     * Get the list of errors
     *
     * @param  {*}      result
     * @param  {Object} argument
     * @return {*}
     *
     */
    errors: function(result, argument, err){

        /// throw error if there was some in the chain
        if(err){
            throw err;
        }

        var r = new SchemaEvaluator(this, argument, Internal.compileOptions);
        return r.errors(result);

    },

    /**
     *
     * Check if the object is valid
     *
     * @param  {*}      result
     * @param  {Object} argument
     * @return {Boolean}
     *
     */
    isValid: function(result, argument, err){

        /// throw error if there was some in the chain
        if(err) {
            throw err;
        }

        var r = new SchemaEvaluator(this, argument, Internal.compileOptions);
        return r.isValid(result);

    },

    /**
     *
     * Serialize the schema rule
     *
     * @return {Object}
     *
     */
    serialize: function(result, argument, err){

        var evaluator = new SchemaEvaluator(this, argument, Internal.compileOptions);
        return evaluator.serialize();

    },

    /**
     *
     * Deserialize from the schema from the given value.
     *
     * @return {SchemaEvaluator}
     *
     */
    deserialize: function(value, argument, err){

        var evaluator = new SchemaEvaluator(this, argument, Internal.compileOptions);
        return evaluator.deserialize(value);

    }

};

/**
 *
 * Schema Chain Facility
 *
 * @param {Object} customFns
 *
 *
 */
var Schema = function(customFns){

    customFns = Safe.object(customFns);

    /// get the Schema validation functions. This is an extension point
    /// for the schema validation.
    var validationFns = _.extend({}, customFns, CustomChainableFns);

    /// Get the current ChainContext of the assertion, in order
    /// to keep the assertion state.
    var chainContext = null;
    _.each(arguments, function(arg){
        if(arg instanceof ChainContext){
            chainContext = arg;
            return false;
        }
    });

    /// if there's no chain context initialize the default functions by
    /// wrapping them in a compatible API
    if(!chainContext){

        /// assign the default validation functions
        var schemaFns = _.extend({}, SchemaChainableFns);

        /// transform the custom validation functions, to use the Schema
        /// runner
        var wrappedFns = _.extend({}, CustomChainableFns, customFns);
        _.each(wrappedFns, function(fn, name){
            wrappedFns[name] = Internal.wrapValidationFunction(name);
        });

        /// give precedence to schemaFns
        customFns = _.extend(wrappedFns, schemaFns);

    }

    /// the chain options
    var chainOptions = {

        /// do not pipe the chainable fns objects
        pipe: false,

        /// Use the Schema type for each chaninable return statement
        type: Schema,

        /// set the scope for each chainable function execution.
        scope: function() {
            return new SchemaDefinition(null, { compile: false });
        },

        /// Evaluation argument. This argument will be present in every
        /// evalFn invocation without interfere with the chain scope.
        argument: validationFns

    };

    /// Inherit from Chains
    Chain.apply(this, [ customFns, EvaluationFns, chainOptions, chainContext ]);

    return new Types.Schema(this);

};

module.exports = Schema;

},{"./Assert/Max":30,"./Assert/Min":31,"./Assert/Regex":34,"./Chain":38,"./Chain/ChainContext":39,"./Safe":47,"./Schema/SchemaDefinition":54,"./Schema/SchemaEvaluator":55,"./Schema/Types":57,"./Type":58,"lodash":"lodash"}],42:[function(require,module,exports){
"use strict";

var _           = require("lodash"),
    Type        = require("../Type"),
    Safe        = require("../Safe"),
    I18NString  = require("../I18N/String"),
    Messages    = require("../I18N/Messages");


/**
 *
 * Internal methods
 *
 * @type {Object}
 *
 */
var Internal = {};

/**
 *
 * Get message
 *
 * @param  {Object} messages
 *
 * @return {I18NMessage}
 *
 */
Internal.getI18NMessage = function(message, messageData){

    messageData = Safe.object(messageData);

    if( message instanceof I18NString ){
        return message;
    }

    /// if message is null or empty
    if( Type.isString(message) ){
        return new I18NString(message, messageData, Messages);
    }

    return new I18NString("");

};

/**
 *
 * Get the stack trace
 *
 * @return {String}
 *
 */
Internal.getStackTrace = function(){

    var error    = new Error(),
        stackStr = Safe.string(error.stack),
        stack    = stackStr.split('\n');

    /// Remove Error message + 2 first lines of the stack trace
    stack.splice(0,3);

    return stack.join('\n');

};

/**
 *
 * @class Error Class
 *
 * @param {String|I18NString} message
 *
 */
var Exception = function(message, messageData) {

    message     = Internal.getI18NMessage(message, messageData);
    messageData = Safe.object(messageData);

    /// get the stack trace
    var stack = Internal.getStackTrace();

    /// define the error message
    Object.defineProperty(
        this,
        "message",
        {
            get: function(){
                return this.toString();
            },
            configurable: false
        }
    );

    /// define the this.stack to return the created Error
    /// stack
    Object.defineProperty(
        this,
        'stack', {
        get: function() {
            return this.toString() + "\n" + stack;
        },
        configurable: false
    });

    /**
     *
     * ToString method with i18n support
     *
     * @param  {Object} translations
     *
     * @return {String}
     *
     */
    this.toString = function(translations){
        return message.toString(translations);
    };

};

Exception.prototype = new Error();
Exception.prototype.constructor = Exception;

module.exports = Exception;

},{"../I18N/Messages":44,"../I18N/String":45,"../Safe":47,"../Type":58,"lodash":"lodash"}],43:[function(require,module,exports){
"use strict";

var _               = require("lodash"),
    Type            = require("../Type"),
    Safe            = require("../Safe"),
    Exception       = require("./Exception");

/**
 *
 * Get the stack trace
 *
 * @return {String}
 *
 */
var getStackTrace = function(){

    var error    = new Error(),
        stackStr = Safe.string(error.stack),
        stack    = stackStr.split('\n');

    /// Remove Error message + 2 first lines of the stack trace
    stack.splice(0,3);

    return stack.join('\n');

};

/**
 *
 * Error class that can contain multiple errors
 * @class
 *
 */
var ExceptionList = function() {

    /// instance of error
    var items  = [];

    /// get the stack trace
    var stack = getStackTrace();

    /// define the this.stack to return the created Error
    /// stack
    Object.defineProperty(
        this,
        'stack', {
        get: function() {
            return this.toString() + "\n" + stack;
        }
    });

    Object.defineProperty(
        this,
        "message",
        {
            get: function(){
                return this.toString();
            },
            configurable: false
        }
    );

    Object.defineProperty(
        this,
        "items",
        {
            get: function(){
                return _.clone(items);
            },
            configurable: false
        }
    );

    Object.defineProperty(
        this,
        "length",
        {
            get: function(){
                return items.length;
            },
            configurable: false
        }
    );

    /**
     *
     * Adds an element to the error list
     *
     * @throws {Error} If invalid argument
     *
     * @param {*} errors
     *
     */
    this.push = function(errors){

        var scope = this;

        /// if argument is an ExceptionList
        if(errors instanceof ExceptionList){
            errors = errors.items;
        }

        /// make sure errors is an array
        errors = Safe.array(errors);

        /// adds the elements to the list
        _.each(
            errors,
            function(error){

                /// if error is on string format add it as an Exception
                if( Type.isString(error) ){
                    error = new Exception(error);
                }

                if( !(error instanceof Error) ){
                    throw new Error("Expected instance of type Error");
                }

                items.push(error);

            });

    };

    /**
     *
     * Clear the error list
     *
     * @return
     *
     */
    this.clear = function(){
        while(items.length) items.pop();
    };

    /**
     *
     * ToString
     *
     * @param {Object} translations
     *
     * @return {String}
     *
     */
    this.toString = function(translations){

        var str         = "",
            length      = items.length,
            separator   = ", ";

        _.each(
            items,
            function(error, index){

                if(error instanceof Exception){
                    str += error.toString(translations);
                }
                else {
                    str += error.toString();
                }

                /// add the separator if its not the last element
                if(index != length-1){
                    str += separator;
                }

            });

        return str;

    };

};

ExceptionList.prototype = new Error();
ExceptionList.prototype.constructor = ExceptionList;


module.exports = ExceptionList;

},{"../Safe":47,"../Type":58,"./Exception":42,"lodash":"lodash"}],44:[function(require,module,exports){
"use strict";

var Messages = {};

/**
 *
 * Invalid value
 *
 * @type {String}
 *
 */
Messages.VALIDATION_INVALID_VALUE = "<%= value %> is invalid.";

/**
 *
 * Required value
 *
 * @type {String}
 */
Messages.VALIDATION_REQUIRED = "Value is required.";

/**
 *
 * Array expected
 *
 * @type {String}
 *
 */
Messages.VALIDATION_TYPE = "'<%= expected %>' was expected but found '<%= value %>' instead.";

/**
 *
 * Max exceed
 *
 * @type {String}
 *
 */
Messages.VALIDATION_MAX = "The maximum value allowed is <%= value %>.";

/**
 *
 * Min exceed
 *
 * @type {String}
 *
 */
Messages.VALIDATION_MIN = "The minimum value allowed is <%= value %>.";

/**
 *
 * Min exceed
 *
 * @type {String}
 *
 */
Messages.REGEXP = "Regular expression '<%= value %>' doesn't match.";

/**
 *
 * Invalid List lenght
 *
 * @type {String}
 *
 */
Messages.VALIDATION_INVALID_LIST_LENGTH = "Expected list with <%= expected %> items but found <%= value %>.";

/**
 *
 * Invalid List
 *
 * @type {String}
 *
 */
Messages.VALIDATION_INVALID_LIST_LENGTH_MULTIPLE_OF = "Expected list length to be multiple of <%= expected %> but found length of <%= value %>.";

/**
 *
 * Invalid List
 *
 * @type {String}
 *
 */
Messages.VALIDATION_INSTANCEOF = "Expected instance of '<%= value %>'.";

module.exports = Messages;

},{}],45:[function(require,module,exports){
"use strict";

var _       = require("lodash"),
    Safe    = require("../Safe");


/**
 *
 * Internal methdos
 *
 * @type {Object}
 *
 */
var Internal = {};

/**
 *
 * Apply the template. The scope of the function is the string.
 *
 * @throws {Error} If template data its missing or wrong
 *
 * @param  {String} name
 * @param  {Object} data
 * @param  {Object} messages
 * @param  {Object} customMessages
 *
 * @return {String}
 *
 */
Internal.applyTemplate = function(name, data, messages, customMessages){

    name            = Safe.string(name);
    data            = Safe.object(data);
    messages        = Safe.object(messages);
    customMessages  = Safe.object(customMessages);

    messages = _.extend({}, messages, customMessages);

    var tmplStr = Safe.string(messages[name]) || name;

    return _.template(tmplStr)(data);

};

/**
 *
 * Template String class. Each string is identified by a name. The template string
 * can be changed when calling toString.
 *
 * @param {String} name
 * @param {Object} data
 * @param {Object} messages
 *
 * @example
 * var str = new I18nString("asas", {}, {});
 *
 */
var I18NString = function(name, data, messages){

    name        = Safe.string(name);
    data        = Safe.object(data);
    messages    = Safe.object(messages);

    /**
     *
     * toString()
     *
     * @throws {Error} If template is not correct
     *
     * @param  {String} messages
     * @param  {Object} data
     * @return {String}
     *
     */
    this.toString = function(customMessages){

        try{

            return Internal.applyTemplate.apply(this, [ name, data, messages, customMessages ]);

        } catch(e){

            var error = _.template(
                "Error on template '<%= name %>': <%= error %>")({
                    name: name,
                    error: e.message
                });

            throw new Error(error);

        }

    };

    /// Initialize string by calling .super()
    String.call( this, this.toString() );

};

/// inherit from String
/* jshint -W053 */
I18NString.prototype = new String();
I18NString.prototype.constructor = I18NString;

module.exports = I18NString;

},{"../Safe":47,"lodash":"lodash"}],46:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    Safe        = require("./Safe");


var Obj = {

    /**
     *
     * Get the object keys. If a filter is specified it returns the keys
     * that match the filter regular expression.
     *
     * @param {Object}          obj
     * @param {String|RegExp}   filter
     *
     * @return {Array}
     *
     */
    filter: function(obj, filter){

        obj         = Safe.object(obj);
        filter      = Safe.regexp(filter, "/.*/");

        return _.transform(
            obj,
            function(result, val, key){

                if(filter.exec(key)){
                    result.push(key);
                }

                return result;

            },
            []);

    }

};

module.exports = Obj;
},{"./Safe":47,"lodash":"lodash"}],47:[function(require,module,exports){
'use strict';


var _       = require('lodash'),
    Type    = require('./Type');


var Internal = {};

/**
 *
 * The regular expression format
 *
 * @type {RegExp}
 *
 */
Internal.RegExpFormat = /^\/.*\/(\w*)$/;

/**
 *
 * Converts a strings to a RegExp
 *
 * @param  {String} str
 * @return {RegExp}
 */
Internal.stringToRegExp = function(str){

    str = Safe.string(str);

    var flags = "",
        regexp = Internal.RegExpFormat.exec(str);

    if(regexp){

        /// if the string is on // format remove the references
        str = str.replace(/^\//, "")
                .replace(/\/$/, "")
                .trim();

        flags = regexp[1];

    }
    else {
        /// strict search
        str = "^" + str + "$";
    }

    return new RegExp(str, flags);

};


var Safe = {};

/*
 * Safelly get array from value
 *
 * @param {*} value The value to get
 * @param {*} defaultValue The value to get
 *
 * @return {Array}
 *
 */
Safe.array = function(value, defaultValue){

    /// if value is null and there is a default value, then
    /// fallback
    /* jshint -W041 */
    if(value == null && defaultValue != null){
        return Safe.array(defaultValue);
    }

    var isArray = Type.isArray(value);

    /* jshint -W041 */
    if(!isArray && value != null){
        value = [value];
    }
    else if(!isArray && value == null){
        value = [];
    }

    return value;

};

/*
 * Safelly get Boolean from value
 *
 * @param {*} value The value to get
 *
 * @return {Boolean}
 *
 */
Safe.boolean = function(value, defaultValue){

    if(Type.isBoolean(value)){
        return Boolean(value);
    }

    /// fallback to the default value
    if(defaultValue !== undefined){
        return Safe.boolean(!!defaultValue);
    }

    /// if is Number
    if(Type.isNumber(value)){
        value = Number(value);
        return Boolean(value);
    }

    /// if is String
    if(Type.isString(value)){
        return !!value;
    }

    return !Type.isEmpty(value);

};


/*
 * Safelly get Boolean from value
 *
 * @param {*} value
 * @param {*} defaultValue
 *
 * @return {String}
 *
 */
Safe.string = function(value, defaultValue){

    if(Type.isString(value)){
        return value;
    }

    return defaultValue !== undefined ?
                Safe.string(defaultValue) : "";

};


/*
 * Safelly get Object from value
 *
 * @param {value}           The value to get
 * @param {defaultValue}    The default value
 *
 * @return {Object}
 *
 */
Safe.object = function(value, defaultValue){

    if(Type.isObject(value)){
        return value;
    }

    return defaultValue !== undefined ?
                Safe.object(defaultValue) : {};

};


/*
 * Safelly get Number from value
 *
 * @param {*} value The value to get
 * @param {*} defaultValue The default value
 *
 * @return {Number} The number or 0 if was not success
 *
 */
Safe.number = function(value, defaultValue){

    if(Type.isNumber(value)){
        return Number(value);
    }
    else {
        return  defaultValue !== undefined ?
                Safe.number(defaultValue) : 0;
    }

};


/*
 * Safelly get Function from value
 *
 * @param {*} value         The value to get
 * @param {*} defaultValue  The value to get
 *
 * @return {Function}
 *
 */
Safe.function = function(value, defaultValue){

    if(Type.isFunction(value)){
        return value;
    }

    if( Type.isFunction(defaultValue) ){
        value = defaultValue;
    }

    if(!value){
        value = function(){ };
    }

    return value;

};


/*
 * Safelly get the value. This never return undefined!
 *
 * @param {*} value         The value to get
 * @param {*} defaultValue  The value to get
 *
 * @return {*}
 *
 */
Safe.value = function(value, defaultValue){

    if(Type.isDefined(value)){
        return value;
    }

    if( Type.isDefined(defaultValue) ){
        return Safe.value(defaultValue);
    }

    return null;

};

/**
 *
 * Safelly gets an instance of the Class. If the value is an instance of Class
 * return it, otherwise return a new instance.
 *
 * @param  {Object} value
 * @param  {Function} Class
 * @param  {Array} args
 *
 * @return {Object}
 *
 */
Safe.instanceOf = function(value, Class){

    value   = Safe.object(value);
    Class   = Safe.function(Class);

    if( value instanceof Class )
    {
        return value;
    }
    else
    {
        return new Class();
    }

};


/**
 *
 * Safelly gets the RegExp
 *
 * @param {*} value
 * @param {*} defaultValue
 *
 * @return {}
 *
 */
Safe.regexp = function(value, defaultValue){

    if(Type.isString(value)){
        return Internal.stringToRegExp(value);
    }

    if(Type.isRegExp(value)){
        return value;
    }

    if(Type.isDefined(defaultValue)){
        return Safe.regexp(defaultValue);
    }

    return Internal.stringToRegExp();

};

/**
 *
 * Safelly get the length of the object
 *
 * @param {*} val
 *
 * @return {Number}
 */
Safe.length = function(val){

    if( Type.isString(val) || Type.isArray(val) ){
        return val.length;
    }

    if( Type.isObject(val) ){
        return _.keys(val).length;
    }

    if( Type.isNumber(val) ){
        return val;
    }

    if( Type.isBoolean(val) ){
        return val ? 1 : 0;
    }

    return 0;

};


/**
 *
 * Coerce the given value from the expected type
 *
 * @param  {*} value
 * @param  {*} expected
 * @return {*}
 *
 */
Safe.coerce = function(value, expected){

    var expectedType    = Type.of(expected),
        type            = Type.of(value);

    if(expectedType === type){
        return value;
    }

    // Expecting a number
    if( Type.isNumber(expected) ){

        if(Type.isNumber(value)){
            return Number(value);
        }

    }

    // Expecting a string
    if( Type.isString(expected) ){

        if(Type.isNumber(value)){
            return value.toString();
        }

    }

    // Expecting a boolean
    if(Type.isBoolean(expected)){

        /// try to get it from a number
        if(Type.isNumber(value)){

            value = Safe.number(value);
            if(value === 1){
                return Boolean(true);
            }
            else if(value === 0){
                return Boolean(false);
            }

        }
        /// try to get it from a string
        else if(Type.isString(value)){

            value = value.toLowerCase();

            if(value == "true"){
                return Boolean(true);
            }
            else if(value == "false"){
                return Boolean(false);
            }

        }

    }

    return value;

};

module.exports = Safe;

},{"./Type":58,"lodash":"lodash"}],48:[function(require,module,exports){
"use strict";

var Schema = require("./CustomSchema");

module.exports = new Schema();
},{"./CustomSchema":41}],49:[function(require,module,exports){
"use strict";


var _                 = require("lodash"),
    Assert            = require("../../Assert"),
    Types             = require("../Types");

/**
 *
 * Schema clone methods
 *
 * @type {Object}
 *
 */
var SchemaClone = function(Class){

    /**
     *
     * Clone the current schema. If `options` is defined it will override the
     * current instance data of the new SchemaDefinition.
     * 
     * @param  {Object} options
     * @return {Class}
     * 
     */
    this.clone = function(options){

        Assert.instanceOf(Types.SchemaDefinition)
            .assert(this);

        var instance = new Class(
            _.extend({}, this, options));

        return instance;

    };

};

module.exports = SchemaClone;


},{"../../Assert":27,"../Types":57,"lodash":"lodash"}],50:[function(require,module,exports){
"use strict";

var _                       = require("lodash"),
    Safe                    = require("../../Safe"),
    Type                    = require("../../Type"),
    Assert                  = require("../../Assert"),
    Exception               = require("../../Exception/Exception"),
    Types                   = require("../Types"),
    SchemaResult            = require("../SchemaResult"),
    SchemaExecutionHelper   = require("./SchemaExecutionHelper");

/**
 *
 * Iterate over the complex value
 *
 * @param  {SchemaDefinition} schema
 * @param  {*} value
 *
 * @return {SchemaResult}
 *
 */
var execute = function(schema, value, validationFns){

    /* jshint -W064 */
    var result = SchemaResult(schema, value);

    /// get the value from the schema
    try {
        value = SchemaExecutionHelper.prepareValue(schema, value, validationFns);
        result.setValue(value);
    }
    catch(e){
        result.addError(e);
        return result;
    }

    /// if value is null there's no need to iterate
    /* jshint -W041 */
    if(value == null){
        return result;
    }

    /// if is expecting any value return it straight away
    if(schema.any){
        return result;
    }

    /// if is not a complex value return the value
    if(!schema.isArray() && !schema.isObject()){
        return result;
    }

    /// prepare the schema for execution against the value. This will expand
    /// the schema to match the value
    try {
        schema = SchemaExecutionHelper.prepareSchema(schema, value, validationFns);
    }
    catch(e){
        result.addError(e);
        return result;
    }

    /// reset the result value before iterating
    result = SchemaResult(schema, schema.isObject() ? {} : []);

    /// recursion over the inner values of the schema
    _.each(schema.schema, function(innerSchema, key){

        /// recursive execute the schema
        var innerResult = innerSchema.execute(value[key], validationFns);

        /// add result to errors
        if(!innerResult.isValid()){
            result.addError(innerResult.getErrors());
            return;
        }

        /// get the inner result value
        var innerValue = innerResult.getValue();

        /// if is an object and value is not required ignore!
        if(schema.isObject() && innerValue == null && !innerSchema.required){
            return;
        }

        /// set the value
        result.setValue(innerValue, { index: key });

    });

    return result;

};

/**
 *
 * Schema execution methods.
 *
 * @type {Object}
 *
 */
var Execution = function(){

    /**
     *
     * Execute Schema against the value. This will perform a top-down recursion on
     * the given structure.
     *
     * @param {SchemaDefinition} schema
     * @param {*} value
     * @param {Object} options
     *
     * @return {SchemaResult}
     *
     */
    this.execute = function(value, validationFns){

        /// validate and normalize arguments
        Assert.instanceOf(Types.SchemaDefinition)
            .assert(this);

        /// if it has no errors iterate over the object
        var result = execute(this, value, validationFns);

        /// if there's error try to recover by applying the default value
        if(!result.isValid()){

            /// try to fallback to the default value if it can
            /* jshint -W041 */
            if(this.default != null){

                var dresult = execute(this, this.default, validationFns);

                /// if default value is valid use it, otherwise use the given
                /// value
                if(dresult.isValid()){
                    result = dresult;
                }

            }

        }

        return result;

    };

};

module.exports = Execution;


},{"../../Assert":27,"../../Exception/Exception":42,"../../Safe":47,"../../Type":58,"../SchemaResult":56,"../Types":57,"./SchemaExecutionHelper":51,"lodash":"lodash"}],51:[function(require,module,exports){
"use strict";

var _                   = require("lodash"),
    Safe                = require("../../Safe"),
    Type                = require("../../Type"),
    Assert              = require("../../Assert"),
    ExceptionList       = require("../../Exception/ExceptionList"),
    Exception           = require("../../Exception/Exception"),
    Types               = require("../Types");
    

/**
 *
 * Prepares and validates the SchemaDefinition for the given 
 * value.
 *
 * @throw {ExceptionList}
 *
 * @param  {SchemaDefinition} schema
 * @param  {*}      value
 * @param  {Object} validationFns
 *
 * @return {SchemaDefinition}
 *
 */
var prepareSchema = function(schema, value, validationFns){

    value           = Safe.value(value);
    validationFns   = Safe.object(validationFns);

    /* jshint -W064 */
    var errors = new ExceptionList();

    /// If not defined and its required throw
    /* jshint -W041 */
    if(schema.required && value == null){
        errors.push(
            new Exception("VALIDATION_REQUIRED"));
    }
    /* jshint -W041 */
    else if(!schema.required && value == null){
        /// continue (optional parameter)
    }
    /// check for compatibility of types if any flag is not used
    else if(!schema.any && Type.of(schema.schema) !== Type.of(value)){
        errors.push(
            new Exception("VALIDATION_TYPE", { expected: Type.of(schema.schema), value: Type.of(value) }));
    }

    /// if there's error throw them
    if(errors.length){
        throw errors;
    }

    return schema;

};

/**
 *
 * Prepares and validates the SchemaDefinition for the given 
 * object.
 *
 * @throws {ExceptionList} If a validation function occurs
 * 
 * @param  {SchemaDefinition} schema
 * @param  {Object} value
 *
 * @return {SchemaDefinition}
 *
 */
var prepareObject = function(schema, value){

    value = Safe.object(value);

    /* jshint -W064 */
    var errors      = new ExceptionList(),
        result      = {},
        valueKeys   = _.keys(value);

    _.each(
        schema.schema,
        function(schemaValue, key){

            var isRegExp = Type.isRegExpStr(key),
                keys     = [];

            /// key is not a regexp string
            if(!isRegExp){
                keys = [ key ];
            }
            else {
                /// key is a regexp string
                var regexp  = Safe.regexp(key);
                keys = _.filter(
                    valueKeys,
                    function(key){

                        /// if there's a definition of the schema don't include it
                        if(schema.schema[key] !== undefined){
                            return false;
                        }

                        /// test if the regex match
                        return !!regexp.exec(key);

                    });
            }

            _.each(keys, function(val) {
                result[val] = schemaValue;
            });

        });

    return schema.clone({
        schema: result
    });

};

/**
 *
 * Prepares and validates the SchemaDefinition for the given 
 * array.
 *
 * @throws {ExceptionList} If a validation error occurs
 *
 * @param  {SchemaDefinition} schema
 * @param  {Array} value
 *
 * @return {SchemaDefinition}
 *
 */
var prepareArray = function(schema, value){

    value = Safe.array(value);

    /* jshint -W064 */
    var errors  = new ExceptionList(),
        result  = [],
        index   = 0;

    if( !schema.repeatable && schema.schema.length != value.length ){
        errors.push(
            new Exception("VALIDATION_INVALID_LIST_LENGTH", { value: value.length, expected: schema.schema.length }));
    }

    if(schema.repeatable){

        var isRepeatable = true;

        /// if the value contains elements check if its divisible by 
        /// the repeat count
        if(value.length > 0 && value.length != schema.schema.length){
            isRepeatable = value.length % schema.schema.length === 0;
        }
        /// otherwise is only repeatable if the array contains no 
        /// element
        else {
            isRepeatable = (value.length === schema.schema.length) && (value.length === 0);
        }

        if(!isRepeatable){
            errors.push(
                new Exception("VALIDATION_INVALID_LIST_LENGTH_MULTIPLE_OF", { value: value.length, expected: schema.schema.length }));    
        }
        
    }

    /// if errors exist throw them
    if(errors.length){
        throw errors;
    }

    /// create the result array
    for(var i=0; i<value.length; i++){

        if(schema.repeatable && index >= schema.schema.length){
            index = 0;
        }

        result.push(schema.schema[index++]);

    }

    return schema.clone({
        schema: result
    });

};

/**
 *
 * Schema Conversion conversion methods
 * 
 * @type {Object}
 * 
 */
var SchemaExecutionHelper = {

    /**
     *
     * Get the value according to the given schema, by applying 
     * default values, coercing values, ...
     *
     * @throws {ExceptionList} If the validation fails
     * 
     * @param  {SchemaDefinition} schema
     * @param  {*} value
     *
     * @return {*}
     *
     */
    prepareValue: function(schema, value, validationFns){

        /// validate and normalize arguments
        Assert.instanceOf(Types.SchemaDefinition)
            .assert(schema);

        value = Safe.value(value);

        /// initalize the list of errors
        var errors = new ExceptionList();

        /// if not strict tries to normalize
        /// the value (e.g. a number can be on string representation )
        if(!schema.strict){
            value = Safe.coerce(value, schema.schema);
        }

        /// if the value is required and it has no value, throw error
        /* jshint -W041 */
        if(schema.required && value == null){
            errors.push(
                new Exception("VALIDATION_REQUIRED"));
        }
        else if(!schema.required && value == null){
            /// ignore, and not fallback on the other else's
        }
        /// if a value exists find out if types are compatible
        else if(!schema.any && Type.of(schema.schema) !== Type.of(value)){
            errors.push(
                new Exception("VALIDATION_TYPE", { expected: Type.of(schema.schema), value: Type.of(value) }));
        }

        /// always run if value is required or value is specified.
        if(schema.required || value !=null){

            _.each(
                schema.validations,
                function(v){

                    v = Safe.object(v);

                    var fn      = Safe.function(validationFns[v.name]),
                        args    = Safe.array(v.args);

                    try{
                        fn.apply({}, [value].concat(args));
                    }catch(e){
                        var error = new Exception(e.message);
                        errors.push(error);
                    }

            });

        }

        /// check if any error was detected
        if(errors.length){
            throw errors;
        }

        return value;

    },

    /**
     *
     * Gets the schema for the given value. If the schema is an object it 
     * will expand its keys regular expressions. If the schema is an array 
     * it will apply its properties to the given value.
     *
     * @throws {ExceptionList} If a validation error occurs
     *
     * @param  {SchemaDefinition} schema
     * @param  {*}      value
     * @param  {Object} validationFns
     * 
     * @return {SchemaDefinition}
     * 
     */
    prepareSchema: function(schema, value, validationFns){

        Assert.instanceOf(Types.SchemaDefinition)
            .assert(schema);

        /// prepare the schema
        schema = prepareSchema(schema, value, validationFns);

        /// prepare the object
        if(schema.isObject()){
            return prepareObject(schema, value);
        }
        /// prepare the array
        else if(schema.isArray()){
            return prepareArray(schema, value);
        }

        return schema;

    }

};

module.exports = SchemaExecutionHelper;

},{"../../Assert":27,"../../Exception/Exception":42,"../../Exception/ExceptionList":43,"../../Safe":47,"../../Type":58,"../Types":57,"lodash":"lodash"}],52:[function(require,module,exports){
"use strict";

var _       = require("lodash"),
    Safe    = require("../../Safe");

/**
 *
 * Serialization methods for SchemaDefinition.
 *
 * @scope {SchemaDefinition}
 * 
 * @type {Object}
 *
 */
var Serialization = function(){

    /**
     *
     * Serializes the schema definition.
     *
     * @return {Object}
     *
     */
    this.serialize = function(){
        return _.cloneDeep(this);
    };

    /**
     *
     * Deserializes the object into a SchemaDefinition
     *
     * @return {SchemaDefinition}
     *
     */
    this.deserialize = function(value){
        return new this.constructor(value);
    };

};

module.exports = Serialization;
},{"../../Safe":47,"lodash":"lodash"}],53:[function(require,module,exports){
"use strict";

var Type = require("../../Type");

/**
 *
 * Schema type methods
 *
 * @scope {SchemaDefinition}
 * 
 * @type {Object}
 *
 */
var SchemaType = function(){

    /**
     *
     * Checks if the schema is an array
     * 
     * @return {Boolean}
     * 
     */
    this.isArray = function(){
        return Type.isArray(this.schema);
    };

    /**
     *
     * Checks if the schema is an object
     * 
     * @return {Boolean}
     * 
     */
    this.isObject = function(){
        return Type.isObject(this.schema);
    };

};

module.exports = SchemaType;

},{"../../Type":58}],54:[function(require,module,exports){
"use strict";

var _               = require("lodash"),
    Types           = require("./Types"),
    Type            = require("../Type"),
    Safe            = require("../Safe"),
    Assert          = require("../Assert");

/**
 *
 * Default conversion between the value and a SchemaDefinition.
 * This converts a primitive value to a SchemaDefinition with defaults
 * value.
 *
 * @type {Object}
 *
 */
var Defaults = {

    array: function(value){

        if(!Type.isArray(value)){
            return;
        }

        // no default value and its required!
        value = new SchemaDefinition({
            schema: value,
            required: true
        });

        return value;

    },

    object: function(value){

        if(!Type.isObject(value)){
            return;
        }

        // no default value and its required!
        value = new SchemaDefinition({
            schema: value,
            required: true
        });

        return value;

    },

    string: function(value){

        if(!Type.isString(value)){
            return;
        }

        // no default value and its required!
        value = new SchemaDefinition({
            schema: "",
            required: true
        });

        return value;

    },

    number: function(value){

        if(!Type.isNumber(value)){
            return;
        }

        // no default value and its required!
        value = new SchemaDefinition({
            schema: 0,
            required: true
        });

        return value;

    },

    boolean: function(value){

        if(!Type.isBoolean(value)){
            return;
        }

        // no default value and its required!
        value = new SchemaDefinition({
            schema: Boolean(value),
            required: true
        });

        return value;

    },

    function: function(value){

        if(!Type.isFunction(value)){
            return;
        }

        // no default value and its required!
        value = new SchemaDefinition({
            schema: function(){},
            required: true
        });

        return value;

    },

};

/**
 *
 * Normalize the schema value in order to avoid storing unnecessary 
 * data and keep the values consistent across usages.
 * 
 * @param  {String} value
 * @return {*}
 * 
 */
var normalizeSchemaValue = function(value){

    value = Safe.value(value);

    if(Type.isString(value)){
        return "";
    }

    if(Type.isNumber(value)){
        return 0;
    }

    if(Type.isBoolean(value)){
        return true;
    }

    return value;

};

/**
 *
 * Compile the given schema definition or compatible 
 * structure.
 *
 * @param {*}       schema
 * @param {Object}  options
 *
 * @return {SchemaDefinition}
 *
 */
var compile = function(schema, options){

    /// extensibility point - prepare the value before the 
    /// compilation
    schema = options.prepare(schema);

    /// apply the defaults and create the SchemaDefinition if an object 
    /// has been provided
    if(!Type.instanceOf(schema, Types.SchemaDefinition)){
        schema = Defaults.object(schema) || Defaults.array(schema) ||
                Defaults.string(schema) || Defaults.number(schema) ||
                Defaults.boolean(schema) || Defaults.function(schema);
    }

    /// convert the schema
    var isArray  = Type.isArray(schema.schema),
        isObject = Type.isObject(schema.schema);

    /// iterate over the structure in order to compile the schema
    if(isArray || isObject){

        _.each(schema.schema, function(val, index){
            var innerSchema = compile(val, options);
            schema.schema[index] = innerSchema;
        });

    }

    return schema;

};

/**
 *
 * A SchemaDefinition class. Contains all the rules that should be applied when
 * evaluating it against a value.
 *
 * @param {Object} options
 *
 */
var SchemaDefinition = function(options){

    options = Safe.object(options);

    /**
     *
     * SchemaDefinition module API
     * 
     * @type {Object}
     * 
     */
    var self = {

        /**
         *
         * The type of schema
         *
         * @type {SchemaDefinition}
         *
         */
        schema: normalizeSchemaValue(options.schema),

        /**
         *
         * Flag that enables strict convertion.
         *
         * @type {Boolean}
         *
         */
        strict: Safe.boolean(options.strict, false),

        /**
         *
         * Any flag. This means that any value is accepted.
         *
         * @type {Boolean}
         *
         */
        any: Safe.boolean(options.any, false),

        /**
         *
         * The default value of the schema
         *
         * @type {*}
         */
        default: options.default,

        /**
         *
         * IsRequired flag
         *
         * @type {Boolean}
         *
         */
        required: Safe.boolean(options.required, true),

        /**
         *
         * Repeatable flag. This means, e.g. if the schema is an array the inner schema can
         * be repeatable by elements.
         *
         * @type {Boolean}
         */
        repeatable: Safe.boolean(options.repeatable),

        /**
         *
         * The validation functions to apply to this Schema node. Each validation function is
         * represented by: { name: 'fn', args: '' }
         *
         * @type {Array}
         *
         */
        validations: Safe.array(options.validations),

    };

    return new Types.SchemaDefinition(self);

};

/**
 *
 * @class
 * A SchemaDefinition compiled class. This represents a fully compiled 
 * instance of all inner structures that represents a Schema.
 *
 * A full iteration over the entire schema structure will be performed.
 * 
 * @param {Object} options  The SchemaDefinition data 
 * @param {Object} cOptions The compilation options
 *
 */
var CompiledSchemaDefinition = function(options, cOptions){

    /// normalize the given compilation options
    cOptions = Safe.object(cOptions);
    cOptions.compile = Safe.boolean(cOptions.compile, true);
    cOptions.prepare = Safe.function(cOptions.prepare, function(v){ return v; });

    /* jshint -W064 */
    var schema = SchemaDefinition(options);

    /// traverse the schema structure compiling its inner elements
    if(cOptions.compile){
        return compile(schema, cOptions);    
    }
    
    return schema;

};

/// include type checking Mixin
require("./Mixins/SchemaType")
    .call(Types.SchemaDefinition.prototype);

/// include clone Mixin functionality
require("./Mixins/SchemaClone")
    .apply(Types.SchemaDefinition.prototype, [ CompiledSchemaDefinition ]);

/// include execution Mixin functionality
require("./Mixins/SchemaExecution")
    .call(Types.SchemaDefinition.prototype);

/// include serialization functionality
require("./Mixins/SchemaSerialization")
    .call(Types.SchemaDefinition.prototype);

module.exports = CompiledSchemaDefinition;

},{"../Assert":27,"../Safe":47,"../Type":58,"./Mixins/SchemaClone":49,"./Mixins/SchemaExecution":50,"./Mixins/SchemaSerialization":52,"./Mixins/SchemaType":53,"./Types":57,"lodash":"lodash"}],55:[function(require,module,exports){
"use strict";


var _                       = require("lodash"),
    Type                    = require("../Type"),
    Safe                    = require("../Safe"),
    ExceptionList           = require("../Exception/ExceptionList"),
    Types                   = require("./Types"),
    SchemaDefinition        = require("./SchemaDefinition");

/**
 *
 * @class
 * The schema evaluator facade. This will serve as interface to the Schema
 * execution.
 *
 * @param {*}       schema
 * @param {Object}  validationFns
 * @param {Object}  cOptions        The SchemaDefinition compilation options
 *
 */
var SchemaEvaluator = function(schema, validationFns, cOptions){

    /* jshint -W064 */
    /**
     *
     * The compiled schema
     *
     * @type {SchemaDefinition}
     * 
     */
    schema = SchemaDefinition(schema, cOptions);

    /**
     *
     * The custom validation functions
     *
     * @type {Object}
     *
     */
    validationFns = Safe.object(validationFns);

    /**
     *
     * SchemaEvaluator external API
     *
     * @type {Object}
     *
     */
    var self = {

        /**
         *
         * Evaluate and get the errors
         *
         * @param  {*}      value
         * @param  {Object} validationFns
         *
         * @return {[Error]}
         *
         */
        errors: function(value){

            var result = schema.execute(value, validationFns);
            return result.getErrors();

        },

        /**
         *
         * Tests if the schema is valid against the given value.
         *
         * @param  {*}  value
         *
         * @return {Boolean}
         *
         */
        isValid: function(value){

            var result = schema.execute(value, validationFns);
            return result.isValid();

        },

        /**
         *
         * Gets the value after applying the schema.
         *
         * @throws {ExceptionList}
         *
         * @param  {*} value
         *
         * @return {*}
         *
         */
        value: function(value){

            var result = schema.execute(value, validationFns);

            if(!result.isValid()){
                throw result.getErrors();
            }

            return result.getValue();

        },

        /**
         *
         * Serialize the current Schema
         *
         * @return {Object}
         *
         */
        serialize: function(){

            return schema.serialize();

        },

        /**
         *
         * Deserialize the value. Returns a new instance of SchemaEvaluator.
         *
         * @return {SchemaEvaluator}
         *
         */
        deserialize: function(value){

            /// use a prepare option that builds the SchemaDefinition to 
            /// avoid fallback on the Default object builder
            var cOptions = {
                prepare: function(val){
                    
                    /// make sure that that the return value is a SchemaDefinition
                    /// NOTE: don't compile the inner structures because the SchemaEvaluator will 
                    /// do it
                    if(!Type.instanceOf(val, Types.SchemaDefinition)){
                        return SchemaDefinition(val, { compile: false });    
                    }

                    return val;
                    
                }
            };

            return new SchemaEvaluator(value, validationFns, cOptions);

        }

    };

    return new Types.SchemaEvaluator(self);

};


module.exports = SchemaEvaluator;

},{"../Exception/ExceptionList":43,"../Safe":47,"../Type":58,"./SchemaDefinition":54,"./Types":57,"lodash":"lodash"}],56:[function(require,module,exports){
"use strict";

var Safe                = require("../Safe"),
    Type                = require("../Type"),
    Assert              = require("../Assert"),
    ExceptionList       = require("../Exception/ExceptionList"),
    Types               = require("./Types");

/**
 *
 * @class
 * Stores the result of a schema evaluation. It will keep reference to
 * the global structure and the evaluation tree as well.
 *
 * @param {*} schema
 * @param {*} value
 *
 *
 */
var SchemaResult = function(schema, value){

    /// validate schema
    Assert.instanceOf(Types.SchemaDefinition)
        .assert(schema);

    /// make sure its a value
    value = Safe.value(value);

    /**
     *
     * Top-down global error tracking
     *
     * @type {ExceptionList}
     *
     */
    var errors = new ExceptionList();

    /**
     *
     * SchemaResult API
     *
     * @type {Object}
     *
     */
    var self = {

        /**
         *
         * Get the errors
         *
         * @return {ExceptionList}
         *
         */
        getErrors: function(){
            return errors;
        },

        /**
         *
         * Add the given errors
         *
         * @param {ExceptionList} error
         *
         */
        addError: function(error){
            errors.push(error);
        },

        /**
         *
         * Checks if the result is valid
         *
         * @return {Boolean}
         *
         */
        isValid: function(){
            return errors.length === 0;
        },

        /**
         *
         * Get the value result.
         *
         * @return {*}
         *
         */
        getValue: function(){
            return value;
        },

        /**
         *
         * Set the value of the given index.
         *
         * @param {*} value
         * @param {Object} options
         *
         */
        setValue: function(val, options) {

            /// normalize val
            val = Safe.value(val);

            /// normalize options
            options = Safe.object(options);
            options.index   = Safe.value(options.index, null);

            if(options.index !== null){
                value[options.index] = val;
            }
            else {
                value = val;
            }

        }

    };

    /// expose module as 'Typed' SchemaResult instance
    return new Types.SchemaResult(self);

};

module.exports = SchemaResult;

},{"../Assert":27,"../Exception/ExceptionList":43,"../Safe":47,"../Type":58,"./Types":57}],57:[function(require,module,exports){
"use strict";

var _ = require("lodash");

/**
 *
 * List of internal Schema package Types.
 *
 * This is useful while using the revealing module pattern and wanting
 * at the same time to use strong type checking.
 *
 */
var Types = {

    /**
     *
     * @class
     * Schema
     *
     */
    Schema: function Schema(options){ _.extend(this, options); },

    /**
     *
     * @class
     * Schema
     *
     */
    SchemaDefinition: function SchemaDefinition(options){ _.extend(this, options); },

    /**
     *
     * @class
     * SchemaEvaluator
     *
     */
    SchemaEvaluator: function SchemaEvaluator(options){ _.extend(this, options); },

    /**
     *
     * @class
     * SchemaResult
     *
     */
    SchemaResult: function SchemaResult(options){ _.extend(this, options); },

    /**
     *
     * @class
     * SchemaResultNode
     *
     */
    SchemaResultNode: function SchemaResultNode(options){ _.extend(this, options); }

};

module.exports = Types;
},{"lodash":"lodash"}],58:[function(require,module,exports){
'use strict';

var Internal = {};

/**
 *
 * The regular expression format
 *
 * @type {RegExp}
 *
 */
Internal.RegExpFormat = /^\/.*\/(\w*)$/;



var Type = {};

/*
 * Get the type of the value
 * Possible values are: undefined, object, array, number, string
 *
 * @param{obj}
 * @return{string}
 *
 */
Type.of = function (obj) {

    var t = typeof obj;

    if(t == "object" && obj instanceof Array){
        return "array";
    }
    else if(t == "object" && typeof(obj) == "boolean"){
        return "boolean";
    }

    return t;
};


/*
 * Checks if the given value is an array
 *
 * @param{value} value to check
 * @return True|False
 *
 */
Type.isArray = function (value) {

    return (value instanceof Array);

};


/*
 * Checks if the given value is an array
 *
 * @param{value} value to check
 * @return True|False
 *
 */
Type.isBoolean = function (value) {

    return typeof(value) === "boolean";

};


/*
 * Checks if the given value is an array
 *
 * @param{value} value to check
 * @return True|False
 *
 */
Type.isFunction = function (value) {

    return typeof(value) === "function";

};


/*
 * Checks if the given value is a string
 *
 * @param{value} value to check
 * @return True|False
 *
 */
Type.isString = function (value) {

    return typeof(value) === "string" ||
           value instanceof String;         /// support to custom String declarations

};


/*
 * Checks if the given value is an object
 *
 * @param{value} value to check
 * @return True|False
 *
 */
Type.isObject = function (value) {

    // null or undefined values are objects, but we don't care
    /* jshint -W041 */
    if(value == null) return false;
    if(Type.isArray(value)) return false;

    return typeof(value) === "object";

};

/**
 * Checks if the given value is a regular expression
 *
 * @param  {*}          value
 * @return {Boolean}
 */
Type.isRegExp = function (value) {

    return (value instanceof RegExp);

};

/**
 * Is value on the regexp string format
 *
 * @param  {*}          value
 * @return {Boolean}
 *
 */
Type.isRegExpStr = function (value) {

    if(!Type.isString(value)){
        return false;
    }

    return !!Internal.RegExpFormat.exec(value);

};

/*
 * Checks if the given value is a number
 *
 * @param{value} value to check
 * @return True|False
 *
 */
Type.isNumber = function (value) {

    var type = typeof(value);
    if(type != "number" && type != "string"){
        return false;
    }

    /// empty strings are equal to 0
    if(type == "string" && !value){
        return false;
    }

    value = Number(value);
    return !isNaN(value);

};


/*
 * Test if the value is defined or not
 *
 * @param {void} value
 *
 * @return {Boolean}
 */
Type.isDefined = function(value){

    /* jshint -W041 */
    if(value != null){
        return true;
    }

    return false;

};

/**
 *
 * Test if value is instanceOf 'fn'
 *
 * @param {*} value
 * @param {*} fn
 * 
 * @return {Boolean}
 * 
 */
Type.instanceOf = function(value, fn){

    /// take care of javascript quirks first!
    
    if(Type.isString(value) && fn == String){
        return true;
    }
    else if(Type.isNumber(value) && fn == Number){
        return true;   
    }
    else if(Type.isBoolean(value) && fn == Boolean){
        return true;
    }

    return (value instanceof fn);
    
};

/**
 *
 * Tests if the value is Empty
 *
 * @param  {*}  value
 *
 * @return {Boolean}
 *
 */
Type.isEmpty = function(value){

    if( !Type.isDefined(value) ){

        return true;
    }

    if( Type.isString(value) ){

        return value === "";
    }

    if( Type.isObject(value) || Type.isArray(value) ){

        for (var key in value) {
            // cancel iteration because it has some data
            return false;
        }

        return true;

    }

    return false;

};


module.exports = Type;

},{}],59:[function(require,module,exports){
'use strict';

var _           = require("lodash"),
    UrlParser   = require("./Url/Parser");


/**
 *
 * @class
 * The Url object
 *
 * @param {[type]} url The Url
 *
 */
var Url = function(url){

    url = UrlParser.normalize(url);

    var _this = {

        /**
         * Tests if the url is absolute
         *
         * @return {Boolean}
         *
         */
        isAbsolute: function(){
            return UrlParser.isAbsolute(url);
        },

        /**
         * Gets the baseUrl
         *
         * @return {String}
         *
         */
        baseUrl: function(){
            return UrlParser.baseUrl(url);
        },

        /**
         * Gets the protocol
         *
         * @return {String}
         *
         */
        protocol: function(){
            return UrlParser.protocol(url);
        },

        /**
         * Gets the path of the url
         *
         * @return {String}
         *
         */
        path: function(){
            return UrlParser.path(url);
        },

        /**
         * Gets the file name
         * @return {String}
         */
        filename: function(){
            return UrlParser.filename(url);
        },

        /**
         * Gets the file path
         * @return {String}
         */
        filepath: function(){
            return UrlParser.filepath(url);
        },

        /**
         * Gets the path of the url
         *
         * @return {String}
         *
         */
        setPath: function(path){

            path = UrlParser.normalize(path);

            var isAbsolute = UrlParser.isAbsolute(path);
            if(isAbsolute){ return false; }

            if(path.indexOf("/") === 0){
                url = UrlParser.normalize( _this.baseUrl() + path );
            }
            else{
                url = UrlParser.normalize( _this.baseUrl() + _this.path() + path );
            }

            return true;

        },

        /**
         *
         * @return {[type]} [description]
         */
        toString: function(){
            return UrlParser.normalize(url);
        }

    };


    return _this;

};


module.exports = Url;

},{"./Url/Parser":60,"lodash":"lodash"}],60:[function(require,module,exports){
'use strict';


var _       = require("lodash"),
    Type    = require("../Type");


/// regular expression to get the baseUrl
var BaseUrlRegExStr = '^[a-z]+://[a-z.-]+(?::[0-9]+)?';
/// regular expression to get the protocol
var ProtocolRegExStr = '^([a-z]+)://';



var UrlParser = {

    /**
     * Normalize url
     *
     * @return{String} the current url
     */
    normalize: function(url) {
    
        if(!url) return "";

        /// replace all //// to a single slash
        url = url.replace(/\/+/g, "/");
        /// because previouly all // were replaced lets fix the protocol syntax (http://)
        url = url.replace(/:\//g, "://");

        return url;

    },

    /**
     * Test if the url is absolute
     * 
     * @return {Boolean}
     * 
     */
    isAbsolute: function(url){

        var regex = new RegExp(BaseUrlRegExStr, "i");
        return !! regex.exec(url);

    },

    /**
     * Gets the protocol of the url 
     * 
     * @param  {String} url
     * @return {String}
     */
    protocol: function(url){

        var regex = new RegExp(ProtocolRegExStr, "gi");
        var result = regex.exec(url);
        if(result) return result[1];
        
        return "";

    },

    /**
     * Returns the baseUrl for the given url
     * 
     * @param  {String} url
     * @return {String}
     */
    baseUrl: function(url){

        var regex = new RegExp(BaseUrlRegExStr, "i");

        var result = "",
            regexResult = regex.exec(url);

        if(regexResult){
            /// always add / at the end of baseUrl
            result = regexResult.shift() + "/";
        }

        return UrlParser.normalize(result);

    },

    /**
     * Get the path of the url
     * 
     * @param  {String} url
     * @return {String}
     */
    path: function(url){

        // sanitize input
        url = url || "";

        var baseUrl = UrlParser.baseUrl(url) || "";

        // remove the base url
        url = url.replace(baseUrl, "");

        // remove the last part of the url. this may be a "/"" or "filehandler"
        var urlParts = url.split("/");
        urlParts.pop();
        urlParts.push("");
        
        // join all
        url = urlParts.join("/");

        return UrlParser.normalize(url);
    },

    /**
     * Get the file name
     * 
     * @return {[type]} [description]
     * 
     */
    filename: function(url){

        // sanitize input
        url = url || "";

        var urlParts = url.split("/");
        
        var filename = urlParts.pop().replace(/\?.*$/, "");
        
        return filename;

    },


    /**
     * Gets the entire File Path
     * 
     * @param  {String} url
     * @return {String}
     */
    filepath: function(url){ 

        return UrlParser.normalize(
            UrlParser.baseUrl(url) + 
            UrlParser.path(url) + 
            UrlParser.filename(url));

    },

    /**
     * get's the query string part of the url
     *
     * @param{href} The full url or null to get the current
     * @param{separator} The url qs separator. Normally is ?
     * @return{String} The query string part of the url
     */
    queryString: function(href, separator) {

        href = href || "";
        separator = separator || '?';

        var hrefSplit = href.split(separator) || [];
        
        if(hrefSplit.length > 1){
            
            // query strin can be malformed like ?a=1&?b=2
            // we can fix this
            var qStringPart = hrefSplit.splice(1, hrefSplit.length-1);
            var qString = "";
            _.forEach(qStringPart, function(qs){
                qString += qs;
            });

            return qString;
        }

        return "";
    },

    /*
     * Parse query string from url
     *
     * @param{separator} The url qs separator. Normally is ?
     * @return An hash with all the query string key/value's
     */
    queryStringObj: function(href, separator) {
    
        href = href || "";

        var qString = UrlParser.queryString(href, separator),
            values = {};

        qString = decodeURI(qString || "");
        _.each(
            qString.split("&"),
            function(keyValue){

                // ignore if 
                if(!keyValue) return;

                var pair = keyValue.split("=");
                
                if(pair.length>1)
                    values[pair[0]] = pair[1];
                else
                    values[pair[0]] = true; // it's more easy to use on conditions
                    

            });

        return values;
    }



};

module.exports = UrlParser;

},{"../Type":58,"lodash":"lodash"}],61:[function(require,module,exports){
'use strict';

var Common = {

    /**
     *
     * Type utility
     *
     * @type {Object}
     *
     */
    Type: require("./Common/Type"),

    /**
     *
     * Safe utility
     *
     * @type {Object}
     *
     */
    Safe: require("./Common/Safe"),

    /**
     *
     * Array utility
     *
     * @type {Object}
     *
     */
    Arr: require("./Common/Arr"),

    /**
     *
     * Object utility
     *
     * @type {Object}
     *
     */
    Obj: require("./Common/Obj"),

    /**
     *
     * I18N utility
     *
     * @type {Object}
     *
     */
    I18N: {

        /**
         *
         * I18NString utility
         *
         * @type {I18NString}
         *
         */
        String: require("./Common/I18N/String"),

    },

    /**
     *
     * Exceptions package
     *
     * @type {Object}
     *
     */
    Exception: {

        /**
         *
         * Exception Class
         *
         * @type {Exception}
         *
         */
        Exception: require("./Common/Exception/Exception"),

        /**
         *
         * ExceptionList
         *
         * @type {ExceptionList}
         *
         */
        ExceptionList: require("./Common/Exception/ExceptionList"),

    },

    /**
     *
     * Url utility
     *
     * @type {Function}
     *
     */
    Url: require("./Common/Url"),

    /**
     *
     * Chain facility
     *
     * @type {Object}
     *
     */
    Chain: require("./Common/Chain"),

    /**
     *
     * Default Assertion instance utility. This provides access to the default
     * Assert functions.
     *
     * @type {Object}
     *
     */
    Assert: require("./Common/Assert"),

    /**
     *
     * Assertion utility
     *
     * @type {Function}
     *
     */
    Assertion: require("./Common/Assertion"),

    /**
     *
     * Schema utility
     *
     * @type {Object}
     *
     */
    Schema: require("./Common/Schema"),

    /**
     *
     * Custom Schema
     *
     * @type {Object}
     *
     */
    CustomSchema: require("./Common/CustomSchema"),


};

module.exports = Common;

},{"./Common/Arr":26,"./Common/Assert":27,"./Common/Assertion":37,"./Common/Chain":38,"./Common/CustomSchema":41,"./Common/Exception/Exception":42,"./Common/Exception/ExceptionList":43,"./Common/I18N/String":45,"./Common/Obj":46,"./Common/Safe":47,"./Common/Schema":48,"./Common/Type":58,"./Common/Url":59}],62:[function(require,module,exports){
"use strict";

var _       = require("lodash"),
    Divhide = require("./Index.js");

/**
 *
 * Specs main module.
 *
 * This exposes the specs that are on .readme folder. Note that the
 * spec files are included on the generated documentation
 *
 */
var SpecIndex = _.extend({}, Divhide, {

    /**
     *
     * Expose sub-modules. These will be used for unit-tests
     *
     * @type {Object}
     *
     */
    SubModules: {

        Url: {
            Parser: require("./Common/Url/Parser")
        },

        Assert: {
            Array: require("./Common/Assert/Array"),
            Max: require("./Common/Assert/Max"),
            Min: require("./Common/Assert/Min"),
            Number: require("./Common/Assert/Number"),
            Regex: require("./Common/Assert/Regex"),
            Required: require("./Common/Assert/Required"),
            String: require("./Common/Assert/String"),
            Object: require("./Common/Assert/Object"),
            InstanceOf: require("./Common/Assert/InstanceOf"),
        },

        Chain: {
            ChainContext: require("./Common/Chain/ChainContext"),
            ChainFunction: require("./Common/Chain/ChainFunction"),
        },

        Schema: {

            SchemaDefinition: require("./Common/Schema/SchemaDefinition"),

            Mixins: {
                SchemaExecution: require("./Common/Schema/Mixins/SchemaExecution"),
                SchemaExecutionHelper: require("./Common/Schema/Mixins/SchemaExecutionHelper")
            }

        }

    },

    Specs: {

        ArrExample                  : function() { require("../.readme/includes/Arr/ArrExample"); },
        AssertionExample            : function() { require("../.readme/includes/Assertion/AssertionExample"); },
        AssertExample               : function() { require("../.readme/includes/Assert/AssertExample"); },
        ChainExample                : function() { require("../.readme/includes/Chain/ChainExample"); },
        ExceptionDocExample         : function() { require("../.readme/includes/Exception/ExceptionDocExample"); },
        ExceptionListDocExample     : function() { require("../.readme/includes/Exception/ExceptionListDocExample"); },
        I18NStringDocExample        : function() { require("../.readme/includes/I18N/I18NStringDocExample"); },
        ObjExample                  : function() { require("../.readme/includes/Obj/ObjExample"); },
        SafeArrayExample            : function() { require("../.readme/includes/Safe/SafeArrayExample"); },
        SafeBooleanExample          : function() { require("../.readme/includes/Safe/SafeBooleanExample"); },
        SafeFunctionExample         : function() { require("../.readme/includes/Safe/SafeFunctionExample"); },
        SafeLengthExample           : function() { require("../.readme/includes/Safe/SafeLengthExample"); },
        SafeNumberExample           : function() { require("../.readme/includes/Safe/SafeNumberExample"); },
        SafeObjectExample           : function() { require("../.readme/includes/Safe/SafeObjectExample"); },
        SafeRegexExample            : function() { require("../.readme/includes/Safe/SafeRegexExample"); },
        SafeStringExample           : function() { require("../.readme/includes/Safe/SafeStringExample"); },
        SafeValueExample            : function() { require("../.readme/includes/Safe/SafeValueExample"); },
        SchemaAnyExample            : function() { require("../.readme/includes/Schema/SchemaAnyExample"); },
        SchemaArrayExample          : function() { require("../.readme/includes/Schema/SchemaArrayExample"); },
        SchemaNumberExample         : function() { require("../.readme/includes/Schema/SchemaNumberExample"); },
        SchemaObjectExample         : function() { require("../.readme/includes/Schema/SchemaObjectExample"); },
        SchemaOverview              : function() { require("../.readme/includes/Schema/SchemaOverview"); },
        SchemaStringExample         : function() { require("../.readme/includes/Schema/SchemaStringExample"); },
        SchemaSerializationExample  : function() { require("../.readme/includes/Schema/SchemaSerializationExample"); },
        TypeExample                 : function() { require("../.readme/includes/Type/TypeExample"); },

    }

});

module.exports = SpecIndex;

},{"../.readme/includes/Arr/ArrExample":1,"../.readme/includes/Assert/AssertExample":2,"../.readme/includes/Assertion/AssertionExample":3,"../.readme/includes/Chain/ChainExample":4,"../.readme/includes/Exception/ExceptionDocExample":5,"../.readme/includes/Exception/ExceptionListDocExample":6,"../.readme/includes/I18N/I18NStringDocExample":7,"../.readme/includes/Obj/ObjExample":8,"../.readme/includes/Safe/SafeArrayExample":9,"../.readme/includes/Safe/SafeBooleanExample":10,"../.readme/includes/Safe/SafeFunctionExample":11,"../.readme/includes/Safe/SafeLengthExample":12,"../.readme/includes/Safe/SafeNumberExample":13,"../.readme/includes/Safe/SafeObjectExample":14,"../.readme/includes/Safe/SafeRegexExample":15,"../.readme/includes/Safe/SafeStringExample":16,"../.readme/includes/Safe/SafeValueExample":17,"../.readme/includes/Schema/SchemaAnyExample":18,"../.readme/includes/Schema/SchemaArrayExample":19,"../.readme/includes/Schema/SchemaNumberExample":20,"../.readme/includes/Schema/SchemaObjectExample":21,"../.readme/includes/Schema/SchemaOverview":22,"../.readme/includes/Schema/SchemaSerializationExample":23,"../.readme/includes/Schema/SchemaStringExample":24,"../.readme/includes/Type/TypeExample":25,"./Common/Assert/Array":28,"./Common/Assert/InstanceOf":29,"./Common/Assert/Max":30,"./Common/Assert/Min":31,"./Common/Assert/Number":32,"./Common/Assert/Object":33,"./Common/Assert/Regex":34,"./Common/Assert/Required":35,"./Common/Assert/String":36,"./Common/Chain/ChainContext":39,"./Common/Chain/ChainFunction":40,"./Common/Schema/Mixins/SchemaExecution":50,"./Common/Schema/Mixins/SchemaExecutionHelper":51,"./Common/Schema/SchemaDefinition":54,"./Common/Url/Parser":60,"./Index.js":61,"lodash":"lodash"}]},{},[62])(62)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
